{
  "version": 3,
  "sources": ["../../../l2.infrastructure/src-page-mvc/sw/sw.ts"],
  "sourcesContent": ["//\r\nimport {IServiceWorker} from \"./sw-lib.ts\";\r\n\r\nconst version:string   = \"1.1\";\r\nconst cacheName = \"jmc_cache\"+version;\r\nconst cacheFiles = [\r\n    'welcome.html',\r\n    'markup.html',\r\n    'cls.html',\r\n    'appshell.html',\r\n    'data/web_components.html',\r\n    'html/es6-ts-this.html',\r\n    'html/js-for-loops.html',\r\n    'manifest_welcome.json',\r\n    'manifest_markup.json',\r\n    'manifest_cls.json',\r\n     'manifest.json',\r\n    'css/reset.css',\r\n     'css/flex.css',\r\n    'images/icons/jmc512.png',\r\n    'images/icons/favicon.ico',\r\n    'images/icons/jmc144.png',\r\n    'images/me3.png',\r\n    'bundles/l2.infrastructure/src-page-mvc/welcome/welcome.js',\r\n    // 'bundles/l2.infrastructure/src-page-mvc/markup/markup.js',\r\n    // 'bundles/l2.infrastructure/src-page-mvc/cls/cls.js'\r\n];\r\n\r\nclass ServiceWorker implements IServiceWorker{\r\n\r\n    constructor(){\r\n        self.addEventListener('install', (e) => {this.install(e)} );\r\n        self.addEventListener('fetch'  , (e) => {this.fetch(e)} );\r\n\r\n        console.log(`sw version: ${version} handlers installed...`);\r\n    }\r\n\r\n    install(fe:FetchEvent){\r\n\r\n        console.log(\"sw install event\");\r\n\r\n        fe.waitUntil(\r\n            caches.open(cacheName)\r\n            .then(cache => cache.addAll( cacheFiles  ))\r\n            .then( () => self.skipWaiting() )\r\n        );\r\n\r\n    }\r\n\r\n    pathName(request:Request):string{\r\n        const url:URL = new URL(request.url);\r\n\r\n        return url.pathname;\r\n    }\r\n\r\n    addToCache(name:string, request:Request){\r\n        if(this.pathName(request).length < 2)return;\r\n\r\n        console.log(`sw cache:${name} update: `, request.url);\r\n\r\n        caches.open(name).then( cache => cache.add(request) );\r\n    }\r\n\r\n    async generateResponse(event:FetchEvent):Promise<Response>{\r\n        const cache = await caches.open(cacheName);\r\n        const cache2 = await caches.open(cacheName+\"aux\");\r\n        const cachedResponse = await cache.match(event.request);\r\n        const cachedResponse2 = await cache2.match(event.request);\r\n\r\n        // if not in cache fetch from network then add to cache\r\n        if( cachedResponse ){\r\n            const url =  new URL( cachedResponse!.url);\r\n\r\n            console.log(\"sw cached response:\", url.pathname);\r\n\r\n            return cachedResponse;\r\n        }\r\n            \r\n        if( cachedResponse2 ){\r\n             const url =  new URL( cachedResponse2!.url);\r\n\r\n            console.log(\"sw cached2 response:\", url.pathname);\r\n\r\n            return cachedResponse2;\r\n        }\r\n          \r\n        const networkResponse = fetch(event.request);\r\n\r\n       if( !cachedResponse ){\r\n           this.addToCache(cacheName+\"aux\",event.request);     \r\n       }\r\n\r\n        return networkResponse;\r\n     }\r\n\r\n    fetch(fe:FetchEvent){\r\n\r\n        \r\n        if(fe.request.method !== \"GET\")return;\r\n\r\n        console.log(\"GET pathname\", this.pathName(fe.request));\r\n\r\n        fe.respondWith( this.generateResponse(fe) );\r\n    }\r\n\r\n    push(event: Event){\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    sync(event: Event) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    activate(event: Event) {\r\n\r\n        // delete old chache is the name if different\r\n        event.waitUntil(\r\n\r\n         //   this.cache.keys().then()\r\n        )\r\n\r\n        console.log(\"activate not implemented.\");\r\n    }\r\n\r\n    message(event: Event) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    cache(event: Event) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}\r\n\r\nconst sw = new ServiceWorker();"],
  "mappings": "AAGA,MAAM,UAAmB;AACzB,MAAM,YAAY,cAAY;AAC9B,MAAM,aAAa;AAAA,EACf;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACC;AAAA,EACD;AAAA,EACC;AAAA,EACD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA;AAGJ;AAEA,MAAM,cAAuC;AAAA,EAEzC,cAAa;AACT,SAAK,iBAAiB,WAAW,CAAC,MAAM;AAAC,WAAK,QAAQ,CAAC;AAAA,IAAC,CAAE;AAC1D,SAAK,iBAAiB,SAAW,CAAC,MAAM;AAAC,WAAK,MAAM,CAAC;AAAA,IAAC,CAAE;AAExD,YAAQ,IAAI,eAAe,OAAO,wBAAwB;AAAA,EAC9D;AAAA,EAEA,QAAQ,IAAc;AAElB,YAAQ,IAAI,kBAAkB;AAE9B,OAAG;AAAA,MACC,OAAO,KAAK,SAAS,EACpB,KAAK,WAAS,MAAM,OAAQ,UAAY,CAAC,EACzC,KAAM,MAAM,KAAK,YAAY,CAAE;AAAA,IACpC;AAAA,EAEJ;AAAA,EAEA,SAAS,SAAuB;AAC5B,UAAM,MAAU,IAAI,IAAI,QAAQ,GAAG;AAEnC,WAAO,IAAI;AAAA,EACf;AAAA,EAEA,WAAW,MAAa,SAAgB;AACpC,QAAG,KAAK,SAAS,OAAO,EAAE,SAAS,EAAE;AAErC,YAAQ,IAAI,YAAY,IAAI,aAAa,QAAQ,GAAG;AAEpD,WAAO,KAAK,IAAI,EAAE,KAAM,WAAS,MAAM,IAAI,OAAO,CAAE;AAAA,EACxD;AAAA,EAEA,MAAM,iBAAiB,OAAmC;AACtD,UAAM,QAAQ,MAAM,OAAO,KAAK,SAAS;AACzC,UAAM,SAAS,MAAM,OAAO,KAAK,YAAU,KAAK;AAChD,UAAM,iBAAiB,MAAM,MAAM,MAAM,MAAM,OAAO;AACtD,UAAM,kBAAkB,MAAM,OAAO,MAAM,MAAM,OAAO;AAGxD,QAAI,gBAAgB;AAChB,YAAM,MAAO,IAAI,IAAK,eAAgB,GAAG;AAEzC,cAAQ,IAAI,uBAAuB,IAAI,QAAQ;AAE/C,aAAO;AAAA,IACX;AAEA,QAAI,iBAAiB;AAChB,YAAM,MAAO,IAAI,IAAK,gBAAiB,GAAG;AAE3C,cAAQ,IAAI,wBAAwB,IAAI,QAAQ;AAEhD,aAAO;AAAA,IACX;AAEA,UAAM,kBAAkB,MAAM,MAAM,OAAO;AAE5C,QAAI,CAAC,gBAAgB;AACjB,WAAK,WAAW,YAAU,OAAM,MAAM,OAAO;AAAA,IACjD;AAEC,WAAO;AAAA,EACV;AAAA,EAED,MAAM,IAAc;AAGhB,QAAG,GAAG,QAAQ,WAAW,MAAM;AAE/B,YAAQ,IAAI,gBAAgB,KAAK,SAAS,GAAG,OAAO,CAAC;AAErD,OAAG,YAAa,KAAK,iBAAiB,EAAE,CAAE;AAAA,EAC9C;AAAA,EAEA,KAAK,OAAa;AACd,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC7C;AAAA,EAEA,KAAK,OAAc;AACf,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC7C;AAAA,EAEA,SAAS,OAAc;AAGnB,UAAM;AAAA;AAAA,IAGN;AAEA,YAAQ,IAAI,2BAA2B;AAAA,EAC3C;AAAA,EAEA,QAAQ,OAAc;AAClB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC7C;AAAA,EAEA,MAAM,OAAc;AAChB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC7C;AAEJ;AAEA,MAAM,KAAK,IAAI,cAAc;",
  "names": []
}
