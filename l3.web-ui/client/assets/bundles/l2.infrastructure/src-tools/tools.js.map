{
  "version": 3,
  "sources": ["../../../../../../l2.infrastructure/src-tools/template.ts", "../../../../../../l2.infrastructure/src-tools/fetch_json.ts", "../../../../../../l2.infrastructure/src-tools/http.ts", "../../../../../../l2.infrastructure/src-tools/console.ts", "../../../../../../l2.infrastructure/src-tools/autoscroll.ts", "../../../../../../l2.infrastructure/src-tools/muteObserver.ts", "../../../../../../l2.infrastructure/src-tools/interop.ts", "../../../../../../l2.infrastructure/src-tools/logger.ts"],
  "sourcesContent": ["type el_attr = {\r\n    id:string;\r\n    name:string;\r\n    value:string;\r\n    innerText:string;\r\n}\r\n\r\n/**\r\n * An class that creates DocumentFragment containing multiple HTML\r\n * elements. This is an Excellent way to populate the  shadow DOM.\r\n * \r\n */\r\nexport class Template {\r\n    _template: HTMLTemplateElement | null;\r\n    _templatesMap: Map<string,HTMLTemplateElement> = new Map<string,HTMLTemplateElement>();\r\n/**\r\n* Loads a template using a specified element id.  \r\n* @param {string } templateId - An id of the Template element in the document.\r\n * @param {URL } url - An id of the Template element in the document.\r\n*/\r\n    constructor(templateId: string , url:URL = new URL(\"http://localhost:3000/data/screens.html\")) {\r\n        this._template = null;\r\n\r\n    ( async ()=>{\r\n        const tm = await this.loadTemplates(templateId,url);\r\n        console.log(\"loadtemplate results\",tm)\r\n    })()\r\n\r\n    }\r\n/**\r\n* Use the fetch api to load a document that contains the template with specified id.  \r\n* @param {string} url - URL of the file containing template element.\r\n * @param {string} elementID - ID of the innerElement.\r\n* @return {Template} - a Template object.\r\n*/\r\n\r\n/**\r\n* Returns the template as an element..\r\n* @return {HTMLTemplateElement} - an HTMLElement representing the Template.\r\n*/\r\n    toElement():HTMLTemplateElement {\r\n      return this._template!;\r\n    }\r\n/**\r\n* Returns a node that represents the clone of the Template..\r\n* @return {HTMLTemplateElement} - an Nodel representing the clone Template.\r\n*/\r\n    toClone():Node {\r\n      return this._template!.content.cloneNode(true);\r\n    }\r\n/**\r\n* Renders the Template into an element.  The existing content of the element is erased.\r\n* @return {void} - void.\r\n*/\r\n    render(output: string):void {\r\n      try{\r\n        document.getElementById(output)!.replaceChildren(this.toClone());\r\n      }\r\n      catch(error){\r\n        console.log(`Error writing to elementID[${output}]...${(error as Error).message}`);\r\n      }\r\n      //document.getElementById(templateId)!.appendChild(this.toClone());\r\n    }\r\n/**\r\n* Renders a cloned copy of the Template into a Node.  The existing content of the element is preserved.\r\n* @return {void} - void.\r\n*/\r\n    renderNode(parent:Node):void {\r\n      parent!.appendChild(this.toClone());\r\n    }\r\n    innerHtml():HTMLElement{\r\n        const inner = document.createElement(\"div\");\r\n\r\n        inner.setAttribute(\"class\",\"hide\");\r\n\r\n        inner.append(this._template!.content.cloneNode(true));\r\n\r\n        return inner as HTMLElement;\r\n    }\r\n    content():DocumentFragment{\r\n\r\n        return this._template!.content;\r\n    }\r\n    clone():DocumentFragment{\r\n        return <DocumentFragment>this._template!.content.cloneNode(true);\r\n    }\r\n\r\n    async loadTemplates(tempid:string,url:URL):Promise<Map<string,HTMLTemplateElement>>{\r\n\r\n       const resp = await fetch(url);\r\n       const text = await resp.text();\r\n       const templates = this.parserDom(text,tempid);\r\n\r\n       console.log(\"templates =\",templates);\r\n\r\n        return this._templatesMap;\r\n    }\r\n    parserDom(domText:string, query:string = \"template\"):HTMLElement[]{\r\n        const domNodes = new DOMParser();\r\n\r\n       const doc = domNodes.parseFromString(domText,\"text/html\");\r\n\r\n        const templateElements = doc.querySelectorAll(query);\r\n\r\n        templateElements.forEach(el => this._templatesMap.set(el.id,el as HTMLTemplateElement));\r\n\r\n        console.log(this._templatesMap);\r\n\r\n        return Array.from(this._templatesMap) as unknown as HTMLElement[];\r\n    }\r\n    init(tempid:string,screensUrl:URL = new URL(\"http://localhost:3000/data/screens.html\")){\r\n\r\n            this._template = document.createElement(\"template\");\r\n            this._template.innerHTML = \"<p>new template</p>\"\r\n\r\n            const _url = new URL(screensUrl);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    static createElement(tagName:string, attrs:el_attr):HTMLElement | DocumentFragment{\r\n        let _attrs = \"\";\r\n\r\n        for(const a in attrs){\r\n           console.log(a);\r\n        }\r\n\r\n        const obj = attrs;\r\n\r\n  //      for(const o in obj) console.log( obj[o] );\r\n\r\n        return  Template.toDocumentFragment(`<${tagName} ${_attrs}'>${attrs.innerText}</${tagName}>`);\r\n    }\r\n    static fetchTemplate(url:URL,elementID:string): Template{\r\n        let result = `\"<span>${elementID}</span>`;\r\n\r\n        //fetch the fragment from the url\r\n\r\n        // html = new Fecch(url);\r\n\r\n        // result = html.getElementByID(id);\r\n\r\n        return new Template(result);\r\n    }\r\n    /**\r\n     * Create a document fragment that contains the element(s) ot a webcomponent.\r\n     * @param {string} value - string containg html.\r\n     * @return {DocumentFragment} - a Template object.\r\n     */\r\n    static toDocumentFragment(value: string): DocumentFragment {\r\n        let temp = document.createElement(\"template\");\r\n\r\n        temp.innerHTML = value;\r\n\r\n        return temp.content;\r\n    }\r\n  }\r\n", "export async function fetchJson<T=object>(name:string):Promise<T[]>{\r\n    const response = await fetch(`http://localhost:3000/data/${name}`);\r\n\r\n    return  await response.json();\r\n}\r\n\r\nexport async function fetchHtml<T=object>(name:string):Promise<DocumentFragment>{\r\n    const response = await fetch(`http://localhost:3000/data/${name}`);\r\n     const dp = new DOMParser();\r\n\r\n    return dp.parseFromString(await response.text(), \"text/html\") as unknown as DocumentFragment;\r\n}", "type PostOptions = {method:string,body:any};\r\ntype GetOptions = {method:string,body:any};\r\nexport class Http{\r\n    _url:string;\r\n    _response:any;\r\n    _result:any;\r\n    constructor(url:string){\r\n        this._url = url;\r\n    }\r\n    async post(fd:FormData){\r\n        let postoptions:PostOptions = {method: \"POST\", body: fd};\r\n    \r\n        this._response = await fetch(this._url,postoptions);\r\n        this._result = this._response.json();\r\n    }\r\n    async get(fd:FormData){\r\n    \r\n        this._response = await fetch(this._url);\r\n        this._result = this._response.json();\r\n    }\r\n    result():any{\r\n        return this._result.message;\r\n    }\r\n}", "import {Template} from \"./template.ts\"\r\n\r\n/**\r\n * Simulates a console.log\r\n * @class\r\n */\r\nexport class Console{\r\nprivate _outputPort: HTMLElement;\r\nprivate _dual = true;\r\n/**\r\n * Creates a new console.\r\n * @param {HTMLElement} element- element where the output goes.  \r\n * @param {boolean} dual? - optional flag to spefy if console.log also gets used.\r\n * @return {Console} - a Console object.\r\n */\r\nconstructor(element:HTMLElement, dual?:boolean){\r\nthis._outputPort = element!;\r\nthis._dual = dual!;\r\n}\r\n/**\r\n* Displays specified text in specefied element (and optionally in colsole.log).  \r\n* @param {string} text - text to be displayed.\r\n* @return {void} - void\r\n*/\r\nlog(text:string):void{\r\nthis._outputPort.appendChild( Template.toDocumentFragment(`<p>${text}</p>`) );\r\n\r\nif(this._dual)console.log(text);\r\n\r\n/*   old of creating element\r\n\r\nconst childElement = document.createElement(\"p\");\r\nchildElement.textContent = text;\r\nthis._outputPort.appendChild(childElement); \r\n\r\n*/\r\n\r\n}\r\n\r\n}", "/**\r\n * An class that autoscrolls an element's contents.\r\n * @class\r\n */\r\nexport class AutoScroller{\r\n_isRunning: boolean = false;\r\n_someElement: HTMLElement = null!;\r\n_observer: MutationObserver = null!;\r\n_start: number = 0;\r\n_end: number = 0;\r\n_change: number = 0;\r\n_elapsedTime: number = 0;\r\n_increment = 20;   // how smooth the scroll  i.e. scrollTop + increment\r\n_duration = 900 // how many milliseconds you want to scroll to last\r\n    //\r\n    constructor( element: HTMLElement ){\r\n        this._someElement = element;\r\n        this._start = this._someElement.scrollTop;\r\n        this._end = this._someElement.scrollHeight;\r\n        this._change = this._end - this._start;\r\n        this._increment = 20;   // og 20 \r\n        this._duration = 900;   // og 900 \r\n\r\n        console.log(\"Autoscroller initialized..\",this._someElement.id);\r\n    }\r\n/**\r\n * Monitors an element and scrolls the contents when height is reached.\r\n * @returns {void}\r\n */\r\n    startObserving()\r\n    {\r\n      if(this._isRunning)return;\r\n\r\n    this._observer = new MutationObserver( this.onMutation.bind(this) );  // Create an observer instance linked to the callback function\r\n\r\n    const config = { attributes: true, childList: true, subtree: true };   // Options for the observer (which mutations to observe)\r\n\r\n    this._observer.observe(this._someElement, config);  // Start observing targetNode for config mutations\r\n\r\n    this._isRunning = true;\r\n    }\r\n/**\r\n * Stops monitoring an element.  Terminates scrolling.\r\n * @returns {void}\r\n */\r\n    stopObserving()\r\n    {\r\n    if(this._observer)this._observer.disconnect();    // Later, you can stop observing\r\n    this._isRunning = false;\r\n    }\r\n    //\r\n    onMutation(mutationList: any, observer: any){\r\n\r\n    for (const mutation of mutationList) \r\n    {\r\n        if (mutation.type === \"childList\") \r\n        {\r\n\r\n            if(mutation.addedNodes.length)\r\n            {\r\n              /*   console.log(`\r\n                observer      ${mutation.addedNodes[0]} childNode added...\r\n                scrollHeight [ ${mutation.addedNodes[0].scrollHeight} ]\r\n                scrollWidth  [ ${mutation.addedNodes[0].scrollWidth} ]\r\n                `); */\r\n            }\r\n\r\n            if(mutation.removedNodes.length)\r\n            {\r\n           //     console.log(`observer ${mutation.removedNodes[0]} childNode removed...`,mutation.removedNodes[0]);\r\n            }\r\n\r\n            this.scrollToBottom( this._someElement );\r\n        } \r\n        else if (mutation.type === \"attributes\") \r\n        {\r\n         //   console.log(`${mutation.attributeName} attribute added/deletd.`);\r\n        }\r\n    }\r\n\r\n    }\r\n    //\r\n    scrollToBottom(someElement: HTMLElement) \r\n    {\r\n        animateScroll(this._duration, someElement);  // smooth scrolling\r\n    }\r\n    //\r\n    animateScroll(duration: number, someElement: any) \r\n    {\r\n      this.animate(0);\r\n    }\r\n    //\r\n    animate(elapsedTime: any) \r\n    {\r\n        elapsedTime += this._increment;\r\n        var position = this.easeInOut(elapsedTime, this._start, this._change, this._duration);\r\n\r\n        this._someElement.scrollTop = position;\r\n\r\n        if (elapsedTime < this._duration) {\r\n            setTimeout( ()=> { this.animate(this._elapsedTime);}, this._increment)\r\n        }\r\n    }\r\n    //\r\n    easeInOut(currentTime: any, start: any, change: any, duration: any) {\r\n        // by Robert Penner\r\n        currentTime /= duration / 2;\r\n\r\n        if (currentTime < 1) {\r\n        return change / 2 * currentTime * currentTime + start;\r\n        }\r\n\r\n        currentTime -= 1;\r\n\r\n        return -change / 2 * (currentTime * (currentTime - 2) - 1) + start;\r\n    }  \r\n}\r\n//\r\nfunction animateScroll(duration: number, someElement: any) \r\n{\r\n  var start = someElement.scrollTop;\r\n  var end = someElement.scrollHeight;\r\n  var change = end - start;\r\n  var increment = 20;   // og 20 \r\n  \r\n  function easeInOut(currentTime: any, start: any, change: any, duration: any) {\r\n    // by Robert Penner\r\n    currentTime /= duration / 2;\r\n\r\n    if (currentTime < 1) {\r\n      return change / 2 * currentTime * currentTime + start;\r\n    }\r\n\r\n    currentTime -= 1;\r\n\r\n    return -change / 2 * (currentTime * (currentTime - 2) - 1) + start;\r\n  }  \r\n  \r\n  function animate(elapsedTime: any) \r\n  {\r\n    elapsedTime += increment;\r\n    var position = easeInOut(elapsedTime, start, change, duration);\r\n\r\n    someElement.scrollTop = position;\r\n\r\n    if (elapsedTime < duration) {\r\n      setTimeout(function() {animate(elapsedTime);}, increment)\r\n    }\r\n  }\r\n\r\n  animate(0);\r\n}\r\n//\r\nexport function winStats1(){\r\n\r\n    console.log(`\r\n    clientHeight ${document.documentElement.clientHeight} \r\n    clientWidth ${document.documentElement.clientWidth} \r\n    \r\n    scrollHeight ${document.documentElement.scrollHeight} \r\n    scrollWidth ${document.documentElement.scrollWidth} \r\n    \r\n    scrollTop ${document.documentElement.scrollTop} \r\n    scrollLeft ${document.documentElement.scrollLeft} \r\n    \r\n    window.innerHeight ${window.innerHeight} \r\n    window,innerWidth ${window.innerWidth} \r\n    \r\n    window.pageXOffset ${window.pageXOffset} \r\n    window.pageYOffset ${window.pageYOffset} \r\n    \r\n    `);\r\n}\r\n  ", "// Callback function to execute when mutations are observed\r\nexport function startObserving(targetNode: HTMLElement)\r\n{\r\nconst observer = new MutationObserver( onMutation );  // Create an observer instance linked to the callback function\r\n\r\nconst config = { attributes: true, childList: true, subtree: true };   // Options for the observer (which mutations to observe)\r\n\r\nobserver.observe(targetNode!, config);  // Start observing targetNode for config mutations\r\n\r\n// observer.disconnect();    // Later, you can stop observing\r\n}\r\n//\r\nfunction onMutation(mutationList: any, observer: any)\r\n {\r\n\r\n  for (const mutation of mutationList) \r\n  {\r\n    if (mutation.type === \"childList\") \r\n    {\r\n  //    console.log(\"A child node has been added or removed.\", observer);\r\n      scrollToBottom( document.getElementById(\"footer\")! );\r\n    } \r\n    else if (mutation.type === \"attributes\") \r\n    {\r\n  //    console.log(`The ${mutation.attributeName} attribute was modified.`,observer);\r\n    }\r\n  }\r\n};\r\n// Here's our main callback function we passed to the observer\r\nfunction scrollToBottom(someElement: HTMLElement) \r\n{\r\n  // the folowwing line enables jumps crolling\r\n  // someElement.scrollTop = someElement.scrollHeight;  \r\n \r\n  // the following 2 lines enable smooth scrolling\r\n  var duration = 900 // Or however many milliseconds you want to scroll to last\r\n  animateScroll(duration, someElement);  // smooth scrolling\r\n}\r\n// First, define a helper function.\r\nfunction animateScroll(duration: number, someElement: any) \r\n{\r\n  var start = someElement.scrollTop;\r\n  var end = someElement.scrollHeight;\r\n  var change = end - start;\r\n  var increment = 20;   // og 20 \r\n  \r\n  function easeInOut(currentTime: any, start: any, change: any, duration: any) {\r\n    // by Robert Penner\r\n    currentTime /= duration / 2;\r\n\r\n    if (currentTime < 1) {\r\n      return change / 2 * currentTime * currentTime + start;\r\n    }\r\n\r\n    currentTime -= 1;\r\n\r\n    return -change / 2 * (currentTime * (currentTime - 2) - 1) + start;\r\n  }  \r\n  \r\n  function animate(elapsedTime: any) \r\n  {\r\n    elapsedTime += increment;\r\n    var position = easeInOut(elapsedTime, start, change, duration);\r\n\r\n    someElement.scrollTop = position;\r\n\r\n    if (elapsedTime < duration) {\r\n      setTimeout(function() {animate(elapsedTime);}, increment)\r\n    }\r\n  }\r\n\r\n  animate(0);\r\n}\r\n//\r\nexport function scrollToBottom2(timedelay=0) {\r\n  var height = 0;\r\n  var minScrollHeight = 100;\r\n  const scrollId = setInterval(function () {\r\n      if (height <= document.body.scrollHeight) {\r\n          window.scrollBy(0, minScrollHeight);\r\n      }\r\n      else {\r\n          clearInterval(scrollId);\r\n      }\r\n      height += minScrollHeight;\r\n  }, timedelay);           \r\n}", "/* import {IEmitter} from './interfaces';\r\nimport {EventEmitter} from 'events'; */\r\n//\r\nexport let consoleTakeSnapShotEvent = new CustomEvent('take-snap-shot', \r\n                                        { \r\n                                            detail: 'snapshot= pagesize= logsize= currentpage=' \r\n                                        });\r\nexport let consoleSnapshotTakenEvent = new CustomEvent('console-snapshot-taken', \r\n                                        { \r\n                                            detail: 'pagesize= logsize= currentpage=' \r\n                                        });\r\nexport let logItemAddedEvent = new CustomEvent('log-item-added', \r\n                                        { \r\n                                            detail: 'hello' \r\n                                        });\r\n//\r\nexport const aBirthDayEvent = new CustomEvent('birthday-event', \r\n                                  { \r\n                                      detail: {\r\n                                        message:  \"Hallp Birthday...\",\r\n                                        dob: \"06/04/64\",\r\n                                        person: \"full name\"\r\n                                      }\r\n                                  });\r\n//\r\nconst anEvent = new Event(\"look\", \r\n                        { bubbles: true, \r\n                            cancelable: false \r\n                        });\r\n// create custom events\r\nconst catFoundEvent = new CustomEvent(\"animal-found\", \r\n                        {\r\n                            detail: {\r\n                            name: \"cat\",\r\n                            },\r\n                        });\r\n//\r\n  const dogFoundEvent = new CustomEvent(\"animal-found\", {\r\n                        detail: {\r\n                        name: \"dog\",\r\n                        },\r\n                        });\r\n//\r\n export class EventEmitter_<T> {\r\n    constructor(private target: HTMLElement, private eventName: string) {}\r\n  \r\n    emit(value: T, options?: any) {\r\n      const aCustomEvent = new CustomEvent<T>(this.eventName, { detail: value, ...options });\r\n\r\n      this.target.dispatchEvent(aCustomEvent);\r\n    }\r\n    on(eventName: string, listner: ()=>void){}\r\n  }\r\n//\r\n", "/**\r\n * A class that logs user input for viewing later.  \r\n * \r\n */\r\nexport class Logger extends  EventTarget{\r\nprivate _log: string[];\r\n//\r\nconstructor()\r\n{\r\nsuper();\r\nthis._log =  new Array();\r\n}\r\n/**\r\n * Listens for a LogEvent and stores the text in the log data store.  \r\n * @param {string} eventName - The name of the event that is used in the addEventListner.\r\n * @param {Function} handler -  The handler function to run once event is received.\r\n * @return {void} - void\r\n */\r\non(eventName: string, handler:(e:Event)=>void): void\r\n{\r\naddEventListener(eventName, handler.bind(this));\r\n}\r\n/**\r\n * Publishes an event on the data store is updated.  \r\n * @param {string} eventName - The name of the event that is used in the addEventListner.\r\n * @param {CustomEvent} evt -  CustomEvent containg details option filled in.\r\n * @return {void} - void\r\n */\r\nemit(eventName: string, evt :CustomEvent):void\r\n{\r\ndispatchEvent(new CustomEvent('log-item-added', {detail: 'hello' }));\r\n}\r\n/**\r\n * Adds text to the data store.  \r\n * @param {string} text- text to be stored.\r\n * @return {void} - void\r\n */\r\nwrite(text:string):void\r\n{\r\n//  if(this._log == undefined)this._log =  new Array();\r\n\r\nlet d: Date = new Date(); \r\nlet timetext = d.getHours().toString().padStart(2, '0')+\":\"+\r\nd.getMinutes().toString().padStart(2, '0')+\":\"+\r\nd.getSeconds().toString().padStart(2, '0');\r\nlet logdata = {time: timetext,index: this._log.length+1 ,text: text};\r\nlet logtext = `time = ${timetext}  text = ${text}  index = ${this._log.length+1} `;\r\nlet itemAddedEvent = new CustomEvent('log-item-added',{detail: {time:timetext,data:logdata,text:logtext}});\r\n\r\nthis._log.push( logtext );\r\n\r\ndispatchEvent(itemAddedEvent);\r\n}\r\n/**\r\n * return number of items in the data store.  \r\n * @return {number} - a number represening the length of the data store.\r\n */\r\nlogSize():number\r\n{\r\nreturn this._log.length;\r\n}\r\n/**\r\n * erases the items in the data store.  \r\n * @return {void} - void.\r\n */\r\nclear():void\r\n{\r\nthis._log.splice(0,this._log.length);\r\n}\r\n\r\n}"],
  "mappings": "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",
  "names": ["start", "change", "duration", "animateScroll", "start", "change", "duration"]
}
