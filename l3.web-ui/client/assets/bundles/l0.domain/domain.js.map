{
  "version": 3,
  "sources": ["../../../../../l0.domain/domain_types.ts", "../../../../../l0.domain/domain.ts"],
  "sourcesContent": ["export type user = {\r\nid: string,\r\ncontact: person,\r\ncompany: string,\r\nlogin?: auth_cred,\r\nfirst_name: string,\r\nlast_name: string,\r\nage: number,\r\ndob: string,\r\nssn: string,\r\nemail: string,\r\nphone: string,\r\naddress: {\r\nid: string,\r\nuser_id: string,\r\nstreet: string,\r\nbldg_apt: string,\r\ncity: string,\r\nstate: string,\r\nzip: string\r\n}\r\n}\r\n\r\nexport type person = {\r\n    id:string;\r\n    first_name: string,\r\n    last_name: string,\r\n    age: number,\r\n    email: string,\r\n    phone: string,\r\n    kids?: person[],\r\n}\r\n\r\nexport type auth_cred = {\r\n    userid:string,\r\n    pwd:string,\r\n    email:string,\r\n}\r\n\r\nexport type customer = {\r\nid:string,\r\ncompanyName: string,\r\nphone: string,\r\ncontact: {\r\nid: string,\r\nfirstname: string,\r\nlastname: string,\r\nage: number,\r\nemail: string,\r\nphone: string,\r\nkids: []\r\n},\r\nlogin:{\r\nuserid: string,\r\nuserpin: string,\r\npwd: string,\r\nemail: string\r\n}\r\n}\r\n\r\nexport type address = {\r\n    id:string,\r\n    street1: string,\r\n    street2?: string,\r\n    building: string\r\n    city: string,\r\n    state: string,\r\n    zip: string\r\n}\r\n\r\nexport type company = {\r\n    id:string,\r\n name: string,\r\n _address:address,\r\n}\r\n\r\nexport type contact = {\r\n    id:string,\r\n    _person:person,\r\n    _address:address,\r\n    _company:company,\r\n    email:string,\r\n    phone:string\r\n}\r\n\r\n\r\ntype form_dto = {\r\n    btnID: string,\r\n    btnValue: string,\r\n    formAction: string,\r\n    formID: string\r\n    formMethod: string,\r\n    formData:object,\r\n}\r\n  \r\ntype fetch_opts = {\r\n    title:\"title\",\r\n    method:\"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\r\n    body: string |  Blob | FormData | ReadableStream | URLSearchParams | object,\r\n   headers:{\r\n    content_type: \"application/json; charset=UTF-8\",\r\n   },\r\n}\r\n\r\n// Enums\r\nexport enum ToppingID {\r\n    NewYorkStyle = 1,\r\n    ChicagoStyle,\r\n    ThinCrust,\r\n    Bread,\r\n    JerkSauce,\r\n    MarinaraSauce,\r\n    Sauce=7,\r\n    Cheese,\r\n    JackCheese,\r\n    ProvaloneCheese,\r\n    FettaCheese=11,\r\n    GoodaCheese,\r\n    CheddarCheese,\r\n    Pepperoni=14,\r\n    Bacon,\r\n    Sausage,\r\n    Onions=17,\r\n    Peppers,\r\n    Tomatoes,\r\n    Olives=20,\r\n    Avocado,\r\n    Mushrooms,\r\n    Egg,\r\n    Orenego,\r\n    Dill,\r\n    Pineapples,\r\n    Pinapples\r\n  }\r\n  \r\n  export enum Toppings {\r\n    NewYorkStyle = 1,\r\n    ChicagoStyle,\r\n    ThinCrust,\r\n    Bread,\r\n    JerkSauce,\r\n    MarinaraSauce,\r\n    Sauce=7,\r\n    Cheese,\r\n    JackCheese,\r\n    ProvaloneCheese,\r\n    FettaCheese=11,\r\n    GoodaCheese,\r\n    CheddarCheese,\r\n    Pepperoni=14,\r\n    Bacon,\r\n    Sausage,\r\n    Onions=17,\r\n    Peppers,\r\n    Tomatoes,\r\n    Olives=20,\r\n    Avocado,\r\n    Mushrooms,\r\n    Egg,\r\n    Orenego,\r\n    Dill,\r\n    Pineapples,\r\n    Pinapples,\r\n  }\r\n  export enum CrustType {\r\n    Thin,\r\n    Chicago,\r\n    Sicilian,\r\n    Tortilla,\r\n    Vegan,\r\n  }\r\n  export enum CrustID {\r\n    Thin,\r\n    Chicago,\r\n    Sicilian,\r\n    Tortilla,\r\n    Vegan,\r\n  }\r\n\r\nexport type GroupItemType    = \"Single\" | \"Multiple\";\r\nexport type GroupToppingType = \"Single\" | \"Multiple\";\r\n\r\nexport type GroupTopping = {\r\n  id: number;\r\n  btype:GroupItemType;\r\n  itype:\"Multiple\";\r\n  items: ToppingID[];\r\n  name: string;\r\n  description: string;\r\n  emoji: string;\r\n}\r\nexport enum ToppingType {\r\n  Bread,\r\n  Meat,\r\n  Vegan,\r\n  Sauce,\r\n  Cheese,\r\n  PlantBased,\r\n  Fruit,\r\n  Seasoning,\r\n  Crust\r\n}\r\nexport type _Topping = {\r\n  id: number;\r\n  type:GroupItemType;\r\n  itype:string;\r\n  description: string;\r\n  cost: number;\r\n  emoji2: string;\r\n  calories: number;\r\n  category: ToppingType;\r\n  usage: string;\r\n  history: string;\r\n}\r\n\r\nexport type topping = {\r\n    id: number;\r\n    itype:string;\r\n    description: string;\r\n    cost: number;\r\n    emoji2: string;\r\n    calories: number;\r\n    category: ToppingType;\r\n    usage: string;\r\n    history: string;\r\n}", "import * as dtype from \"./domain_types.ts\";\r\n\r\nexport * from './domain_types.ts';\r\n\r\nexport class Person{\r\nprivate _state:dtype.person = {\r\n    id: '0',\r\n    first_name: '',\r\n    last_name: '',\r\n    age: 0,\r\n    email: '',\r\n    phone: ''\r\n};\r\nconstructor(p:dtype.person){\r\n    this._state = p;\r\n}\r\n}\r\n\r\nexport class User{\r\nprivate state:dtype.user = {\r\n    address: {bldg_apt: \"\", city: \"\", id: \"\", state: \"\", street: \"\", user_id: \"\", zip: \"\"},\r\n    age: 0,\r\n    dob: \"\",\r\n    email: \"\",\r\n    first_name: \"\",\r\n    id: \"\",\r\n    last_name: \"\",\r\n    ssn: \"\",\r\n    contact: {\r\n        id: '0',\r\n        first_name: '',\r\n        last_name: '',\r\n        age: 0,\r\n        email: '',\r\n        phone: '',\r\n        kids: undefined\r\n    },\r\n    company: '',\r\n    phone: ''\r\n};\r\nprivate accounts:UserAccount[] = [];\r\nconstructor(usr:dtype.user){\r\n    this.state = usr;\r\n}\r\n}\r\n\r\nexport class Customer{\r\n    private state:dtype.customer;\r\n    constructor(c:dtype.customer){\r\n        this.state = c;\r\n    }\r\n}\r\n\r\nexport class UserAccount{\r\nprivate state:dtype.user = {\r\n    address: {bldg_apt: \"\", city: \"\", id: \"\", state: \"\", street: \"\", user_id: \"\", zip: \"\"},\r\n    age: 0,\r\n    dob: \"\",\r\n    email: \"\",\r\n    first_name: \"\",\r\n    id: \"\",\r\n    last_name: \"\",\r\n    ssn: \"\",\r\n    contact: {\r\n        id: '0',\r\n        first_name: '',\r\n        last_name: '',\r\n        age: 0,\r\n        email: '',\r\n        phone: '',\r\n        kids: undefined\r\n    },\r\n    company: '',\r\n    phone: ''\r\n};\r\nprivate authcred:AuthCred = new AuthCred();\r\n}\r\n\r\nexport class AuthCred{\r\nprivate state:dtype.auth_cred = {\r\n    userid: '',\r\n    pwd: '',\r\n    email: ''\r\n};\r\n}\r\n\r\nexport class Resume{\r\nprivate state:{} = {};\r\n}\r\n\r\nexport class Employee{\r\nprivate state:{} = {};\r\n}\r\n\r\nexport class Employer{\r\nprotected state:{}={};\r\n}\r\n\r\nexport class Company extends Employer{\r\nprotected state1:{} = {};\r\nconstructor(){\r\n    super();\r\n}\r\n}"],
  "mappings": "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",
  "names": ["ToppingID", "Toppings", "CrustType", "CrustID", "ToppingType"]
}
